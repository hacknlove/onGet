class t extends class{constructor(t,s={}){this.url=t,this.cached=s.firstValue,this.defaultValue=s.defaultValue,this.subscriptions=new Map,this.totalSubscriptionsCount=0}setValue(t){this.cached=t,this.triggerSubscriptions()}getValue(){return this.cached??this.defaultValue}triggerSubscriptions(){for(const t of this.subscriptions.values())t(this.value,this)}get value(){return this.getValue()}set value(t){this.setValue(t)}onChange(t){const s=this.totalSubscriptionsCount++;return this.subscriptions.set(s,t),()=>this.subscriptions.delete(s)}}{constructor(t,{computation:s=(()=>{}),urls:i=[],...e}={},o){super(t,e),this.sharedContext=o,this.crossSubcriptions=[],this.addUrls(i),this.addComputation(s)}addUrls(t){this.urls=t,this.crossSubcriptions.forEach(t=>t()),this.crossSubcriptions=this.urls.map(t=>this.sharedContext.onChange(t,this.recompute))}addComputation(t){this.computation=t,this.recompute()}recompute(t,s){const i=this.computation(this.sharedContext.proxy,t,s);return void 0!==i&&(this.value=i),i}removeComputation(){this.computation=()=>{}}}class s{constructor(t){this.sharedContext=t}newResource(s,i){return new t(s,i,this.sharedContext)}}s.protocol="com";export default s;export{t as ComResource};
